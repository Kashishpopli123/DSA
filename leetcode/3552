class Solution {
    vector<pair<int,int>> directions = {{-1,0},{1,0},{0,-1},{0,1}};
public:
    int minMoves(vector<string>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();

        unordered_map<char, vector<pair<int, int>>> mp;
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                char ch = matrix[i][j];
                if(ch != '.' && ch != '#') {
                    mp[ch].push_back({i, j});
                }
            }
        }

        vector<vector<int>> visited(n, vector<int>(m, 0));
        unordered_set<char> used_portals;
        queue<pair<int, pair<int, int>>> q; // moves, (i, j)

        if(matrix[0][0] == '.') {
            q.push({0, {0, 0}});
            visited[0][0] = 1;
        } else if(matrix[0][0] != '#' && matrix[0][0] != '.') {
            for(auto &it : mp[matrix[0][0]]) {
                q.push({0, {it.first, it.second}});
                visited[it.first][it.second] = 1;
            }
            used_portals.insert(matrix[0][0]); 
        }

        while(!q.empty()) {
            auto top = q.front(); q.pop();
            int current = top.first;
            int i = top.second.first;
            int j = top.second.second;

            if(i == n - 1 && j == m - 1) return current;

            for(auto &dir : directions) {
                int new_i = i + dir.first;
                int new_j = j + dir.second;

                if(new_i >= 0 && new_j >= 0 && new_i < n && new_j < m &&
                   !visited[new_i][new_j] && matrix[new_i][new_j] != '#') {

                    if(matrix[new_i][new_j] == '.') {
                        q.push({current + 1, {new_i, new_j}});
                        visited[new_i][new_j] = 1;
                    } else {
                        char portal = matrix[new_i][new_j];
                        if(!used_portals.count(portal)) {
                            used_portals.insert(portal);
                            for(auto &it1 : mp[portal]) {
                                if(!visited[it1.first][it1.second]) {
                                    q.push({current + 1, {it1.first, it1.second}});
                                    visited[it1.first][it1.second] = 1;
                                }
                            }
                        }
                    }
                }
            }
        }

        return -1; 
    }
};
