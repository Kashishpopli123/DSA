class Solution {
    private:
    int getsum(int n){
        int ans = 0;
        while(n != 0){
            ans = ans + n%10;
            n = n/10;
        }
        return ans;
    }
public:
    int minSwaps(vector<int>& nums) {
        int n = nums.size();
        vector<int> dupli;
        for(int i=0;i<n;i++){
            dupli.push_back(getsum(nums[i]));
        }
        vector<vector<int>> arr;
        for(int i=0;i<n;i++){
            arr.push_back({dupli[i],nums[i],i});
        }
        vector<vector<int>> dusra = arr;
        sort(arr.begin(),arr.end(),[&](vector<int> &a,vector<int> &b){
           if(a[0] != b[0]){
            return a[0] < b[0];
           }
           return a[1] < b[1];
        });
        vector<int> visited(n,0);
        unordered_map<int,int> mp;
        for(int i=0;i<n;i++){
            mp[dusra[i][2]] = i;
        }
        int swaps = 0;
        for(int i=0;i<n;i++){
           if(arr[i][0] != dusra[i][0] || arr[i][1] != dusra[i][1]){
            int current_index = mp[arr[i][2]];
            swap(dusra[current_index],dusra[i]);
            mp[dusra[i][2]] = i;
            mp[dusra[current_index][2]] = current_index;
            swaps++;
           }
        }
        return swaps;
    }
};
