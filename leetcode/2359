class Solution {

    vector<int> find(int source,vector<vector<int>> &adj){
      int n = adj.size();
      vector<int> distance(n,INT_MAX);
      queue<pair<int,int>> q;
      q.push({source,0});
      distance[source] = 0;
    //   visited[source] = 1;
      while(!q.empty()){
        int node = q.front().first;
        int dis = q.front().second;
        q.pop();
        for(auto &it : adj[node]){
            if(distance[it] > distance[node] + 1){
                distance[it] = distance[node]+1;
                q.push({it,distance[node]+1});
            }
        }
      }
      return distance;
    }
public:
    int closestMeetingNode(vector<int>& edges, int node1, int node2) {
        int n = edges.size();
        vector<vector<int>> adj(n);
        for(int i=0;i<n;i++){
            if(edges[i] != -1){
           adj[i].push_back(edges[i]);
            }
        }
        vector<int> arr1 = find(node1,adj);
        vector<int> arr2 = find(node2,adj);
        int maxi = INT_MIN;
        int ans = INT_MAX;
        int node = -1;
for (int i = 0; i < n; i++) {
    if (arr1[i] == INT_MAX || arr2[i] == INT_MAX) continue;
    int maxDist = max(arr1[i], arr2[i]);
    if (maxDist < ans) {
        ans = maxDist;
        node = i;
    }
}

        
return node;
    }
};
